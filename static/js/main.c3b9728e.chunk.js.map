{"version":3,"sources":["App.js","index.js"],"names":["contractAddress","App","props","componentDidMount","a","async","window","ethereum","web3Provider","enable","logError","web3","currentProvider","Web3","eth","net","getId","setState","updateBalance","setInterval","recoverTransfers","catch","render","state","balance","message","error","className","onClick","deposit","withdraw","style","color","contract","Contract","ABI","methods","call","parseInt","toString","console","String","log","gatewayJS","amount","open","sendToken","GatewayJS","Tokens","BTC","Btc2Eth","suggestedAmount","Math","floor","sendTo","contractFn","nonce","utils","randomNonce","contractParams","name","type","value","fromAscii","result","recipient","prompt","Eth2Btc","Buffer","from","getGateways","previousGateways","Array","values","transfer","recoverTransfer","pause","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c3b9728e.chunk.js","sourcesContent":["import React from 'react';\nimport GatewayJS from \"@renproject/gateway\";\nimport Web3 from \"web3\";\nimport './App.css';\n\nimport ABI from \"./ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0x3aa969d343bd6ae66c4027bb61a382dc96e88150\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      gatewayJS: new GatewayJS(\"testnet\"),\n    }\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        this.logError(\"Please allow access to your Web3 wallet.\");\n        return;\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.logError(\"Please install MetaMask!\");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError(\"Please set your network to Kovan.\");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n\n    this.recoverTransfers().catch(this.logError);\n  }\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} BTC</p>\n        <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.001 BTC</button></p>\n        <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n        <p>{message}</p>\n        {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n      </div>\n    );\n  }\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  }\n\n  logError = (error) => {\n    console.error(error);\n    this.setState({ error: String((error || {}).message || error) });\n  }\n\n  log = (message) => {\n    this.setState({ message });\n  }\n\n  deposit = async () => {\n    const { web3, gatewayJS } = this.state;\n    const amount = 0.001; // BTC\n\n    try {\n      await gatewayJS.open({\n        // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n        sendToken: GatewayJS.Tokens.BTC.Btc2Eth,\n\n        // Amount of BTC we are sending (in Satoshis)\n        suggestedAmount: Math.floor(amount * (10 ** 8)), // Convert to Satoshis\n\n        // The contract we want to interact with\n        sendTo: contractAddress,\n\n        // The name of the function we want to call\n        contractFn: \"deposit\",\n\n        // The nonce is used to guarantee a unique deposit address\n        nonce: GatewayJS.utils.randomNonce(),\n\n        // Arguments expected for calling `deposit`\n        contractParams: [\n          {\n            name: \"_msg\",\n            type: \"bytes\",\n            value: web3.utils.fromAscii(`Depositing ${amount} BTC`),\n          }\n        ],\n\n        // Web3 provider for submitting mint to Ethereum\n        web3Provider: web3.currentProvider,\n      }).result();\n      this.log(`Deposited ${amount} BTC.`);\n    } catch (error) {\n      // Handle error\n      this.logError(error);\n    }\n  }\n\n  withdraw = async () => {\n    const { web3, gatewayJS, balance } = this.state;\n\n    const amount = balance;\n    const recipient = prompt(\"Enter BTC recipient:\");\n\n    // You can surround shiftOut with a try/catch to handle errors.\n\n    await gatewayJS.open({\n      // Send BTC from the Ethereum blockchain to the Bitcoin blockchain.\n      // This is the reverse of shitIn.\n      sendToken: GatewayJS.Tokens.BTC.Eth2Btc,\n\n      // The contract we want to interact with\n      sendTo: contractAddress,\n\n      // The name of the function we want to call\n      contractFn: \"withdraw\",\n\n      // Arguments expected for calling `deposit`\n      contractParams: [\n        { name: \"_msg\", type: \"bytes\", value: web3.utils.fromAscii(`Withdrawing ${amount} BTC`) },\n        { name: \"_to\", type: \"bytes\", value: \"0x\" + Buffer.from(recipient).toString(\"hex\") },\n        { name: \"_amount\", type: \"uint256\", value: Math.floor(amount * (10 ** 8)) },\n      ],\n\n      // Web3 provider for submitting burn to Ethereum\n      web3Provider: web3.currentProvider,\n    }).result();\n\n    this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n  }\n\n  recoverTransfers = async () => {\n    const { web3, gatewayJS } = this.state;\n    // Load previous transfers from local storage\n    const previousGateways = await gatewayJS.getGateways();\n    // Resume each transfer\n    for (const transfer of Array.from(previousGateways.values())) {\n      gatewayJS\n        .recoverTransfer(web3.currentProvider, transfer)\n        .pause()\n        .result()\n        .catch(this.logError);\n    }\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// Unregister causes an \"Unhandled Rejection (SecurityError): The operation is\n// insecure.\" in the latest version of Firefox.\n// serviceWorker.unregister();\n"],"sourceRoot":""}