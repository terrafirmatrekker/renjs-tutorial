{"version":3,"sources":["App.js","index.js"],"names":["contractAddress","App","props","componentDidMount","a","window","ethereum","web3Provider","enable","logError","web3","currentProvider","Web3","eth","net","getId","setState","updateBalance","setInterval","currentTrade","getTrade","sendToken","RenJS","Tokens","BTC","Btc2Eth","deposit","Eth2Btc","withdraw","render","state","balance","message","error","className","onClick","catch","style","color","contract","Contract","ABI","methods","call","parseInt","toString","console","String","log","storeTrade","trade","localStorage","setItem","JSON","stringify","parse","getItem","renJS","amount","suggestedAmount","Math","floor","sendTo","contractFn","nonce","utils","randomNonce","contractParams","name","type","value","fromAscii","shiftIn","gatewayAddress","addr","waitForDeposit","on","utxo","confirmations","submitToRenVM","status","signature","submitToEthereum","txHash","undefined","recipient","prompt","getAccounts","from","Promise","resolve","reject","btc","addressToHex","send","shiftOut","readFromEthereum","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.61007588.chunk.js","sourcesContent":["// @ts-nocheck\n\nimport React from 'react';\nimport RenJS from \"@renproject/ren\";\nimport Web3 from \"web3\";\nimport './App.css';\n\nimport ABI from \"./ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0xb2731C04610C10f2eB6A26ad14E607d44309FC10\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      renJS: new RenJS(\"testnet\"),\n    }\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        this.logError(\"Please allow access to your Web3 wallet.\");\n        return;\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.logError(\"Please install MetaMask!\");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError(\"Please set your network to Kovan.\");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n\n    // Check if the user has an incomplete trade\n    const currentTrade = this.getTrade();\n\n    // Check if the trade is a deposit or a withdrawal\n    if (currentTrade && currentTrade.sendToken === RenJS.Tokens.BTC.Btc2Eth) {\n      this.deposit(currentTrade);\n    }\n    if (currentTrade && currentTrade.sendToken === RenJS.Tokens.BTC.Eth2Btc) {\n      this.withdraw(currentTrade);\n    }\n  }\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} BTC</p>\n        <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.001 BTC</button></p>\n        <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n        <p>{message}</p>\n        {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n      </div>\n    );\n  }\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  }\n\n  logError = (error) => {\n    if (error) {\n      console.error(error);\n    }\n    this.setState({ error: String((error || {}).message || error) });\n  }\n\n  log = (message) => {\n    this.setState({ message });\n  }\n\n  // Store a trade's details to local storage\n  storeTrade = (trade) => {\n    localStorage.setItem(\"trade\", JSON.stringify(trade));\n  }\n\n  // Retrieve a trade's details from local storage, if there is one\n  getTrade = () => {\n    try {\n      return JSON.parse(localStorage.getItem(\"trade\"));\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  deposit = async (trade) => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS } = this.state;\n\n    const amount = 0.001; // BTC\n\n    trade = trade || {\n      // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n      sendToken: RenJS.Tokens.BTC.Btc2Eth,\n\n      // Amount of BTC we are sending (in Satoshis)\n      suggestedAmount: Math.floor(amount * (10 ** 8)), // Convert to Satoshis\n\n      // The contract we want to interact with\n      sendTo: contractAddress,\n\n      // The name of the function we want to call\n      contractFn: \"deposit\",\n\n      nonce: renJS.utils.randomNonce(),\n\n      // Arguments expected for calling `deposit`\n      contractParams: [\n        {\n          name: \"_msg\",\n          type: \"bytes\",\n          value: web3.utils.fromAscii(`Depositing ${amount} BTC`),\n        }\n      ],\n    };\n\n    this.storeTrade(trade);\n\n    const shiftIn = renJS.shiftIn(trade);\n\n    // Show the gateway address to the user so that they can transfer their BTC to it.\n    const gatewayAddress = shiftIn.addr();\n    this.log(`Deposit ${amount} BTC to ${gatewayAddress}`);\n\n    // Wait for the Darknodes to detect the BTC transfer.\n    const confirmations = 2;\n    const deposit = await shiftIn.waitForDeposit(confirmations)\n      .on(\"deposit\", deposit => this.log(`Waiting for BTC confirmations: ${deposit.utxo.confirmations}/${confirmations}`));\n\n    // Retrieve signature from RenVM.\n    this.log(\"Submitting to RenVM...\");\n    const signature = await deposit.submitToRenVM()\n      .on(\"status\", status => this.log(`Submitting to RenVM... (${status})`));\n\n    // Submit the signature to Ethereum and receive zBTC.\n    this.log(\"Submitting to smart contract...\");\n    await signature.submitToEthereum(web3.currentProvider)\n      .on(\"transactionHash\", txHash => this.log(`Submitting to smart contract... (hash: ${txHash})`));\n    this.log(`Deposited ${amount} BTC.`);\n\n    // Clear trade from localstorage\n    this.storeTrade(undefined);\n  }\n\n  withdraw = async (trade) => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS, balance } = this.state;\n\n    if (!trade) {\n      const amount = balance;\n      const recipient = prompt(\"Enter BTC recipient:\");\n      const from = (await web3.eth.getAccounts())[0];\n      const contract = new web3.eth.Contract(ABI, contractAddress);\n\n      this.log(\"Calling `withdraw` on smart contract...\");\n      const txHash = await new Promise((resolve, reject) => {\n        contract.methods.withdraw(\n          web3.utils.fromAscii(`Depositing ${amount} BTC`), // _msg\n          RenJS.utils.btc.addressToHex(recipient), //_to\n          Math.floor(amount * (10 ** 8)), // _amount in Satoshis\n        ).send({ from })\n          .on(\"transactionHash\", resolve)\n          .catch(reject);\n      });\n\n      trade = {\n        // Send BTC from the Ethereum blockchain to the Bitcoin blockchain.\n        // This is the reverse of shitIn.\n        sendToken: RenJS.Tokens.BTC.Eth2Btc,\n\n        // The transaction hash of our contract call\n        txHash,\n      };\n      this.storeTrade(trade);\n    }\n\n    this.log(`Retrieving burn event from contract...`);\n    const shiftOut = await renJS.shiftOut({ ...trade, web3Provider: web3.currentProvider }).readFromEthereum();\n\n    this.log(`Submitting to RenVM...`);\n    await shiftOut.submitToRenVM()\n      .on(\"status\", status => this.log(`Submitting to RenVM... (${status})`));\n\n    this.log(`Withdrew BTC successfully.`);\n\n    // Clear trade from localstorage\n    this.storeTrade(undefined);\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// Unregister causes an \"Unhandled Rejection (SecurityError): The operation is\n// insecure.\" in the latest version of Firefox.\n// serviceWorker.unregister();\n"],"sourceRoot":""}