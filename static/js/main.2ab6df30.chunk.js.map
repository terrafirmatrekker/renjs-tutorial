{"version":3,"sources":["App.js","index.js"],"names":["contractAddress","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateBalance","asyncToGenerator","regenerator_default","a","mark","_callee","web3","contract","balance","wrap","_context","prev","next","state","eth","Contract","ABI","methods","sent","setState","parseInt","toString","Math","pow","stop","log","message","deposit","_callee2","_this$state","sdk","amount","shiftIn","gatewayAddress","signature","_context2","sendToken","RenSDK","Tokens","BTC","Btc2Eth","sendAmount","sendTo","contractFn","contractParams","name","type","value","utils","fromAscii","concat","addr","waitForDeposit","submitToRenVM","submitToEthereum","currentProvider","withdraw","_callee3","_this$state2","recipient","from","txHash","shiftOut","_context3","prompt","getAccounts","Promise","resolve","reject","addressToHex","send","on","catch","Eth2Btc","web3Provider","readFromEthereum","window","ethereum","enable","console","error","Web3","_this2","setInterval","_this$state3","react_default","createElement","className","onClick","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.2ab6df30.chunk.js","sourcesContent":["// @ts-nocheck\n\nimport React from 'react';\nimport RenSDK from \"@renproject/ren\";\nimport Web3 from \"web3\";\nimport './App.css';\n\nimport ABI from \"./ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0x200870dd0f84ddd64fc96a25d9e9107cba30a092\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      sdk: new RenSDK(\"testnet\"),\n    }\n  }\n\n  async componentDidMount() {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        console.error(\"User denied account access\")\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.log(\"Please install MetaMask!\");\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    this.setState({ web3 }, () => {\n\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n  }\n\n  render() {\n    const { balance, message } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} BTC</p>\n        <p><button onClick={this.deposit}>Deposit 0.001 BTC</button></p>\n        <p><button onClick={this.withdraw}>Withdraw {balance} BTC</button></p>\n        <p>{message}</p>\n      </div>\n    );\n  }\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  }\n\n  log = (message) => {\n    this.setState({ message });\n  }\n\n  deposit = async () => {\n    const { web3, sdk } = this.state;\n    const amount = 0.001; // BTC\n\n    const shiftIn = sdk.shiftIn({\n      // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n      sendToken: RenSDK.Tokens.BTC.Btc2Eth,\n\n      // Amount of BTC we are sending (in Satoshis)\n      sendAmount: amount * (10 ** 8), // Convert to Satoshis\n\n      // The contract we want to interact with\n      sendTo: contractAddress,\n\n      // The name of the function we want to call\n      contractFn: \"deposit\",\n\n      // Arguments expected for calling `deposit`\n      contractParams: [\n        {\n          name: \"_msg\",\n          type: \"bytes\",\n          value: web3.utils.fromAscii(`Depositing ${amount} BTC`),\n        }\n      ],\n    });\n\n    // Show the gateway address to the user so that they can transfer their BTC to it.\n    const gatewayAddress = shiftIn.addr();\n    this.log(`Deposit ${amount} BTC to ${gatewayAddress}`);\n\n    // Wait for the Darknodes to detect the BTC transfer.\n    const confirmations = 0;\n    const deposit = await shiftIn.waitForDeposit(confirmations);\n\n    // Retrieve signature from RenVM.\n    this.log(\"Submitting to RenVM...\");\n    const signature = await deposit.submitToRenVM();\n\n    // Submit the signature to Ethereum and receive zBTC.\n    this.log(\"Submitting to smart contract...\");\n    await signature.submitToEthereum(web3.currentProvider);\n    this.log(`Deposited ${amount} BTC.`);\n  }\n\n  withdraw = async () => {\n    const { web3, sdk, balance } = this.state;\n\n    const amount = balance;\n    const recipient = prompt(\"Enter BTC recipient:\");\n    const from = (await web3.eth.getAccounts())[0];\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n\n    this.log(\"Calling `withdraw` on smart contract...\");\n    const txHash = await new Promise((resolve, reject) => {\n      contract.methods.withdraw(\n        web3.utils.fromAscii(`Depositing ${amount} BTC`), // _msg\n        RenSDK.Tokens.BTC.addressToHex(recipient), //_to\n        amount * (10 ** 8), // _amount in Satoshis\n      ).send({ from })\n        .on(\"transactionHash\", resolve)\n        .catch(reject);\n    });\n\n    this.log(`Retrieving burn event from contract...`);\n    const shiftOut = await sdk.shiftOut({\n      // Send BTC from the Ethereum blockchain to the Bitcoin blockchain.\n      // This is the reverse of shitIn.\n      sendToken: RenSDK.Tokens.BTC.Eth2Btc,\n\n      // The web3 provider to talk to Ethereum\n      web3Provider: web3.currentProvider,\n\n      // The transaction hash of our contract call\n      txHash,\n    }).readFromEthereum();\n\n    this.log(`Submitting to Darknodes...`);\n    await shiftOut.submitToRenVM();\n    this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// Unregister causes an \"Unhandled Rejection (SecurityError): The operation is\n// insecure.\" in the latest version of Firefox.\n// serviceWorker.unregister();\n"],"sourceRoot":""}