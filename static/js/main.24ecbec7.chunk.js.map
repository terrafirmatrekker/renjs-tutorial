{"version":3,"sources":["App.js","index.js"],"names":["contractAddress","App","props","componentDidMount","a","async","window","ethereum","web3Provider","enable","logError","web3","currentProvider","Web3","eth","net","getId","setState","updateBalance","setInterval","render","state","balance","message","error","className","onClick","deposit","catch","withdraw","style","color","contract","Contract","ABI","methods","call","parseInt","toString","console","String","log","renJS","amount","shiftIn","sendToken","RenJS","Tokens","BTC","Btc2Eth","sendAmount","Math","floor","sendTo","contractFn","nonce","utils","randomNonce","contractParams","name","type","value","fromAscii","gatewayAddress","addr","waitForDeposit","submitToRenVM","signature","submitToEthereum","recipient","prompt","getAccounts","from","Promise","resolve","reject","addressToHex","send","on","txHash","shiftOut","Eth2Btc","readFromEthereum","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.24ecbec7.chunk.js","sourcesContent":["// @ts-nocheck\n\nimport React from 'react';\nimport RenJS from \"@renproject/ren\";\nimport Web3 from \"web3\";\nimport './App.css';\n\nimport ABI from \"./ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0xb2731C04610C10f2eB6A26ad14E607d44309FC10\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      renJS: new RenJS(\"testnet\"),\n    }\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        this.logError(\"Please allow access to your Web3 wallet.\");\n        return;\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.logError(\"Please install MetaMask!\");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError(\"Please set your network to Kovan.\");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n  }\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} BTC</p>\n        <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.001 BTC</button></p>\n        <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n        <p>{message}</p>\n        {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n      </div>\n    );\n  }\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  }\n\n  logError = (error) => {\n    console.error(error);\n    this.setState({ error: String((error || {}).message || error) });\n  }\n\n  log = (message) => {\n    this.setState({ message });\n  }\n\n  deposit = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS } = this.state;\n    const amount = 0.001; // BTC\n\n    const shiftIn = renJS.shiftIn({\n      // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n      sendToken: RenJS.Tokens.BTC.Btc2Eth,\n\n      // Amount of BTC we are sending (in Satoshis)\n      sendAmount: Math.floor(amount * (10 ** 8)), // Convert to Satoshis\n\n      // The contract we want to interact with\n      sendTo: contractAddress,\n\n      // The name of the function we want to call\n      contractFn: \"deposit\",\n\n      nonce: renJS.utils.randomNonce(),\n\n      // Arguments expected for calling `deposit`\n      contractParams: [\n        {\n          name: \"_msg\",\n          type: \"bytes\",\n          value: web3.utils.fromAscii(`Depositing ${amount} BTC`),\n        }\n      ],\n    });\n\n    // Show the gateway address to the user so that they can transfer their BTC to it.\n    const gatewayAddress = shiftIn.addr();\n    this.log(`Deposit ${amount} BTC to ${gatewayAddress}`);\n\n    // Wait for the Darknodes to detect the BTC transfer.\n    const confirmations = 0;\n    const deposit = await shiftIn.waitForDeposit(confirmations);\n\n    // Retrieve signature from RenVM.\n    this.log(\"Submitting to RenVM...\");\n    const signature = await deposit.submitToRenVM();\n\n    // Submit the signature to Ethereum and receive zBTC.\n    this.log(\"Submitting to smart contract...\");\n    await signature.submitToEthereum(web3.currentProvider);\n    this.log(`Deposited ${amount} BTC.`);\n  }\n\n  withdraw = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS, balance } = this.state;\n\n    const amount = balance;\n    const recipient = prompt(\"Enter BTC recipient:\");\n    const from = (await web3.eth.getAccounts())[0];\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n\n    this.log(\"Calling `withdraw` on smart contract...\");\n    const txHash = await new Promise((resolve, reject) => {\n      contract.methods.withdraw(\n        web3.utils.fromAscii(`Depositing ${amount} BTC`), // _msg\n        RenJS.Tokens.BTC.addressToHex(recipient), //_to\n        Math.floor(amount * (10 ** 8)), // _amount in Satoshis\n      ).send({ from })\n        .on(\"transactionHash\", resolve)\n        .catch(reject);\n    });\n\n    this.log(`Retrieving burn event from contract...`);\n    const shiftOut = await renJS.shiftOut({\n      // Send BTC from the Ethereum blockchain to the Bitcoin blockchain.\n      // This is the reverse of shitIn.\n      sendToken: RenJS.Tokens.BTC.Eth2Btc,\n\n      // The web3 provider to talk to Ethereum\n      web3Provider: web3.currentProvider,\n\n      // The transaction hash of our contract call\n      txHash,\n    }).readFromEthereum();\n\n    this.log(`Submitting to Darknodes...`);\n    await shiftOut.submitToRenVM();\n    this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// Unregister causes an \"Unhandled Rejection (SecurityError): The operation is\n// insecure.\" in the latest version of Firefox.\n// serviceWorker.unregister();\n"],"sourceRoot":""}